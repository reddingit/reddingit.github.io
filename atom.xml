<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[5 minutes walk]]></title>
  <subtitle><![CDATA[Sometimes in life you feel the fight is over...]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://5minuteswalk.com/"/>
  <updated>2016-09-11T02:19:24.000Z</updated>
  <id>http://5minuteswalk.com/</id>
  
  <author>
    <name><![CDATA[Redding Yu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[树莓派3B上手小记]]></title>
    <link href="http://5minuteswalk.com/2016/09/09/%E6%A0%91%E8%8E%93%E6%B4%BE3B%E4%B8%8A%E6%89%8B%E5%B0%8F%E8%AE%B0/"/>
    <id>http://5minuteswalk.com/2016/09/09/树莓派3B上手小记/</id>
    <published>2016-09-09T15:27:21.000Z</published>
    <updated>2016-09-11T02:19:24.000Z</updated>
    <content type="html"><![CDATA[<p>终于入手了心仪已久的树莓派3B，使用过程略有曲折。</p>
<p>1.sudo apt-get update 源504的问题<br>开机之后，第一步当然是去把raspbian系统更新到最新，使用sudo apt-get update却遇到了504的问题，google后发现需要更新源设置：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.<span class="type">list</span></span><br></pre></td></tr></table></figure>
<p>文件内容变更为：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//archive.raspbian.org/raspbian wheezy main contrib non-free</span></span><br><span class="line">deb-src <span class="string">http:</span><span class="comment">//archive.raspbian.org/raspbian wheezy main contrib non-free</span></span><br></pre></td></tr></table></figure>
<p>然后更新apt source，执行：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">dist</span>-upgrade</span><br></pre></td></tr></table></figure>
<p>然后更新raspbian系统，执行：</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure>
<p>参考：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/raspberrypi.stackexchange.com/questions</span><span class="regexp">/10600/apt</span>-get-update-gives-me-errors-<span class="keyword">with</span>-mirrordirector-raspbian-org/</span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/www.raspbian.org/</span><span class="constant">RaspbianRepository</span></span><br></pre></td></tr></table></figure>
<p>2.vi编辑文件时笔记本键盘键位不对的问题</p>
<p>我是用macbook pro ssh连接的pi，使用vi编辑文件的时候发现，笔记本和键盘的键位和平时使用的完全不一致，编辑起来很痛苦，google之后，发现需要安装vim，<br><code>sudo apt-get install vim</code><br>即可，安装过程中遇到了<br><code>vim : 依赖: vim-common (= 2:7.3.429-2ubuntu2.1) 但是 2:7.3.547-4ubuntu1 正要被安装
E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。</code><br>的错误，原因可能是安装vim所依赖的vim-common和系统自带的vim-common版本冲突，解决办法就是先把vim-common卸载了人然后再安装vim即可.</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-common</span><br><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">vim</span></span><br></pre></td></tr></table></figure>
<p>或者直接使用nano，放弃vi。。。</p>
<p>3.pi 3自带wifi模块，wifi配置问题</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/wp<span class="built_in">a_supplicant</span>/wp<span class="built_in">a_supplicant</span>.conf</span><br><span class="line"></span><br><span class="line">network=&#123;   </span><br><span class="line">    ssid=“WIFI名称“</span><br><span class="line">    psk=”WIFI密码“</span><br><span class="line">    key_mgmt=WPA-PSK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改完成后，使用以下命令重启网络</p>
<p><code>sudo /etc/init.d/networking restart</code></p>
<p>重启完成后，使用<code>ifconfig</code>查看wifi连接状态：wlan0</p>
<p>4.pi系统设置：时区、用户密码等</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> raspi-config</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>终于入手了心仪已久的树莓派3B，使用过程略有曲折。</p>
<p>1.sudo apt-get update 源504的问题<br>开机之后，第一步当然是去把raspbian系统更新到最新，使用sudo apt-get update却遇到了504的问题，google后发现需]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何解决问题]]></title>
    <link href="http://5minuteswalk.com/2016/09/08/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://5minuteswalk.com/2016/09/08/如何解决问题/</id>
    <published>2016-09-08T14:02:06.000Z</published>
    <updated>2016-09-08T14:02:20.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/categories/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[成功是最危险的敌人]]></title>
    <link href="http://5minuteswalk.com/2016/09/08/%E6%88%90%E5%8A%9F%E6%98%AF%E6%9C%80%E5%8D%B1%E9%99%A9%E7%9A%84%E6%95%8C%E4%BA%BA/"/>
    <id>http://5minuteswalk.com/2016/09/08/成功是最危险的敌人/</id>
    <published>2016-09-08T13:58:59.000Z</published>
    <updated>2016-09-08T14:00:40.000Z</updated>
    <content type="html"><![CDATA[<p>嘿，不小心标题党了一把，准确地说应该是：过往的成功是最危险的亲密敌人。</p>
<p>过往的成功就像一个你向它出卖灵魂的恶魔，它知道你的辛苦，知道你的渴望，知道你的贪婪，于是不停的用你追求的诱惑着你，让你出卖更多的灵魂，出卖更多的底线，换取更大的成功。然而过往就是过往，恶魔就是恶魔，当你出卖完所有的灵魂，消耗尽所有的过往，也是图穷匕见之时。</p>
<p>作为一个创业者，从0到1是最艰苦的阶段，当我们通宵达旦的努力，历经千辛万苦，忍受着众人的非议，克服了内心的彷徨，终于做对了一两件小事，做出了一点点成绩，取得了一些微小的成功。</p>
<p>在面临新的决策时，我们往往会认为：我们以前按照现在这个模式，已经取得了成功，现在和以后，按照这个模式，也会继续成功，持续成功。</p>
<p>这个时候，过往的成功是我们最危险的敌人。这种想法就像恶魔，让你沉湎于过往的成功的焰火中，从而，不能分辨今日面对的问题是不是还是昨天面对的问题，不能认识今日所处的环境是不是还是昨天所处的环境，不能清楚今日脚下的位置是不是还是昨天脚下的位置。</p>
<p>永远永远永远都不要沉迷于过往的成功，过去是对的不代表现在是对的，它会让你：</p>
<blockquote>
<p>1，固步自封，无法看到外部形势的变化，以为过去成功了，现在还可以接着成功；<br>2，逡巡不前，面对新的决策时，受困于过往曾经成功的决策，不敢做出改变。</p>
</blockquote>
<p>时间在变化，矛盾在转化，一切的事物都在矛盾的不断作用下不断发展。过往的成功所蕴含的经验可以借鉴，却不能依赖。时刻关注外部世界的形势，及时调整策略，才是制胜之道。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>嘿，不小心标题党了一把，准确地说应该是：过往的成功是最危险的亲密敌人。</p>
<p>过往的成功就像一个你向它出卖灵魂的恶魔，它知道你的辛苦，知道你的渴望，知道你的贪婪，于是不停的用你追求的诱惑着你，让你出卖更多的灵魂，出卖更多的底线，换取更大的成功。然而过往就是过往，恶魔]]>
    </summary>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/categories/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[卓有成效的管理者读书笔记二]]></title>
    <link href="http://5minuteswalk.com/2016/09/08/%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://5minuteswalk.com/2016/09/08/卓有成效的管理者读书笔记二/</id>
    <published>2016-09-08T13:55:22.000Z</published>
    <updated>2016-09-08T14:43:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u7B2C_u4E8C_u7AE0__u638C_u63E1_u81EA_u5DF1_u7684_u65F6_u95F4"><a href="#u7B2C_u4E8C_u7AE0__u638C_u63E1_u81EA_u5DF1_u7684_u65F6_u95F4" class="headerlink" title="第二章 掌握自己的时间"></a>第二章 掌握自己的时间</h2><blockquote>
<ul>
<li>记录时间</li>
<li>管理时间</li>
<li>统一安排时间</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="u65F6_u95F4_u5BF9_u7BA1_u7406_u8005_u7684_u538B_u529B"><a href="#u65F6_u95F4_u5BF9_u7BA1_u7406_u8005_u7684_u538B_u529B" class="headerlink" title="时间对管理者的压力"></a>时间对管理者的压力</h3><blockquote>
<ul>
<li>要想有效，就必须能时间做整块的运用。</li>
</ul>
</blockquote>
<p>妈妈们怀胎十月可以生下一个可爱的baby，如果把这十个月分散到十年里，肯定生不出孩子</p>
<blockquote>
<ul>
<li>人都是时间消费者，而大多数人也是时间浪费者。</li>
<li>才能本身并不是成果</li>
<li>要想与他人有效沟通，总得花上足够的时间。</li>
<li>如果你真想影响别人，那至少需要一小时以上。如果你想和别人建立良好的人际关系，就需要更多的时间。</li>
<li>知识工作者只能自己定制工作方向，所以他必须了解别人期望他做出的贡献是什么，原因是什么，对必须使用其知识成果的人的工作情况，他也要有足够的了解。</li>
<li>知识工作者要想取得成果和绩效，就必须着眼于整个组织的成果和绩效。</li>
<li>组织规模越大，管理者实际可掌握的时间越少。</li>
<li>对人事的问题决定的太快，很容易铸成错误。</li>
<li>凡是有效的管理者，都知道他们如果想在人事方面做出最佳的决策，总得花费几个小时进行不间断的考虑。</li>
<li>人事问题，都需要较长的、连续性的和不受打扰的时间才能决定。</li>
<li>人事决策都是费时的决策。</li>
<li>在组织内部所发生的，只有人工和成本。</li>
<li>机械操作员相对轻闲的工作完全是知识工作者超时工作的结果。</li>
<li>如果时间短促，一个人就只能考虑他已经熟悉的事情，只能做他曾经做过的事。</li>
</ul>
</blockquote>
<h3 id="u5982_u4F55_u8BCA_u65AD_u81EA_u5DF1_u7684_u65F6_u95F4"><a href="#u5982_u4F55_u8BCA_u65AD_u81EA_u5DF1_u7684_u65F6_u95F4" class="headerlink" title="如何诊断自己的时间"></a>如何诊断自己的时间</h3><blockquote>
<ul>
<li>首先要找出什么事根本不必做</li>
<li>时间记录上的哪些活动可以由别人代为参加而又不影响效果<blockquote>
<ul>
<li>如果认为所谓授权，意思是说：『我的』工作应该由别人来做，那就错了；因为你既然拿了薪水，就该做你自己的工作。</li>
<li>授权应该是把可由别人做的事情交付给别人，这样才能做真正应由自己做的事。</li>
</ul>
</blockquote>
</li>
<li>管理者在浪费别人的时间<blockquote>
<ul>
<li>人总有一种倾向，高估自己地位的重要性，认为许多事非躬亲不可。</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="u6D88_u9664_u6D6A_u8D39_u65F6_u95F4_u7684_u6D3B_u52A8"><a href="#u6D88_u9664_u6D6A_u8D39_u65F6_u95F4_u7684_u6D3B_u52A8" class="headerlink" title="消除浪费时间的活动"></a>消除浪费时间的活动</h3><blockquote>
<ul>
<li>首先要做的是，找出由于缺乏制度或远见而产生时间浪费的因素</li>
</ul>
<blockquote>
<ul>
<li>所谓例行作业，是将本来要靠专家才能处理的事，设计成无须研究判断，人人均可处理的作业。</li>
<li>同一个危机如果重复出现，往往是疏忽和懒散造成的。</li>
<li><strong>一个平静无波的工厂，必是管理上了轨道。如果一个工厂常常是高潮迭起，在参观者看来大家忙的不可开交，就必是管理不善。管理好的工厂，总是单调无味，没有任何刺激动人的事件。那是因为凡是可能发生的危机都早已预见，且已将解决方法变成例行工作了</strong>。</li>
<li>一个管理上了轨道的组织，常是一个令人觉得兴味索然的组织。</li>
</ul>
</blockquote>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u7B2C_u4E8C_u7AE0__u638C_u63E1_u81EA_u5DF1_u7684_u65F6_u95F4"><a href="#u7B2C_u4E8C_u7AE0__u638C_u63E1_u81EA_u5DF1_u7684_u65F6_u95F4" class="headerlink" title="第二章 掌握自己的时间"></a>第二章 掌握自己的时间</h2><blockquote>
<ul>
<li>记录时间</li>
<li>管理时间</li>
<li>统一安排时间</li>
</ul>
</blockquote>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://5minuteswalk.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/categories/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[卓有成效的管理者读书笔记一]]></title>
    <link href="http://5minuteswalk.com/2016/09/05/%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://5minuteswalk.com/2016/09/05/卓有成效的管理者读书笔记一/</id>
    <published>2016-09-05T14:10:32.000Z</published>
    <updated>2016-09-05T14:42:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><h3 id="u7BA1_u7406_u8005_u80FD_u5426_u7BA1_u7406_u597D_u522B_u4EBA_u4ECE_u6765_u5C31_u6CA1_u6709_u88AB_u771F_u6B63_u9A8C_u8BC1_u8FC7_uFF0C_u4F46_u7BA1_u7406_u8005_u5374_u5B8C_u5168_u53EF_u4EE5_u7BA1_u7406_u597D_u81EA_u5DF1_u3002"><a href="#u7BA1_u7406_u8005_u80FD_u5426_u7BA1_u7406_u597D_u522B_u4EBA_u4ECE_u6765_u5C31_u6CA1_u6709_u88AB_u771F_u6B63_u9A8C_u8BC1_u8FC7_uFF0C_u4F46_u7BA1_u7406_u8005_u5374_u5B8C_u5168_u53EF_u4EE5_u7BA1_u7406_u597D_u81EA_u5DF1_u3002" class="headerlink" title="管理者能否管理好别人从来就没有被真正验证过，但管理者却完全可以管理好自己。"></a>管理者能否管理好别人从来就没有被真正验证过，但管理者却完全可以管理好自己。</h3><a id="more"></a>
<h2 id="u7B2C_u4E00_u7AE0__u5353_u6709_u6210_u6548_u662F_u53EF_u4EE5_u5B66_u4F1A_u7684"><a href="#u7B2C_u4E00_u7AE0__u5353_u6709_u6210_u6548_u662F_u53EF_u4EE5_u5B66_u4F1A_u7684" class="headerlink" title="第一章 卓有成效是可以学会的"></a>第一章 卓有成效是可以学会的</h2><blockquote>
<ul>
<li>管理者做事必须有效。</li>
<li>一个人的有效性，与他的智力、想象力或知识之间，几乎没有太大的关联。</li>
<li>才能本身并不是成果</li>
<li>知识工作者并不生产本身具有效用的产品，他生产的是知识、创意和信息。</li>
<li>在一个现代组织里，如果一位知识工作者能够凭借其职位和知识，对该组织负有贡献的责任，因而能实质的影响该组织的经营能力及达成的成果，那么他就是一位管理者。</li>
<li>这样的一位管理者，不仅仅以执行命令为满足，他必须能做决策，并承担起做出贡献的任务。</li>
<li>只要他有一天身为管理者，他就不能忘记他的标准、目标和贡献。</li>
<li>知识工作不能用数量来衡量，也不能用成本来衡量。衡量知识工作者主要应看其结果，而不是看机构的规模有多大或管理工作的繁简。</li>
<li>『管理者』一词，将泛指知识工作者、经理人员和专业人员。</li>
<li>管理者的工作性质是计划、组织、整合、激励和考核。</li>
<li>组织是能使个人才干得以增值的一项工具。</li>
<li>在组织的内部，不会有成果出现，一切的成果都存在于组织之外。</li>
<li>在组织内部所发生的，只有人工和成本。</li>
<li>组织存在的唯一理由，就是为外部环境提供良好的服务。</li>
<li>组织是社会的一种器官，只有能为外部环境做出自己的贡献，才能算有所成就。</li>
<li>对于外部情况，真正重要的不是趋势，而是趋势的转变。</li>
<li>一位管理者，如果不能有意识地努力去觉察外部世界，则组织内部的事务必将蒙蔽他们，使他们看不见真正的现实。</li>
<li>若某人在某一重要领域具有一技之长，就要让他充分发挥这一特长。</li>
<li>只有通过改进工作手段来充分发挥人的能力，恶不应该期望人的能力突然提高。</li>
<li>学会善用那些专精于某一领域的人。</li>
<li>所谓有效性，就是使能力和知识资源能够产生更多更好的成果的一种手段。</li>
</ul>
<ul>
<li>有效的管理者：<blockquote>
<ol>
<li>有效的管理者知道他们的时间用在什么地方</li>
<li>有效的管理者重视对外界的贡献</li>
<li>有效的管理者善于利用长处</li>
<li>有效的管理者集中精力于少数重要的领域</li>
<li>有效的管理者善于做有效的决策</li>
</ol>
</blockquote>
</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><h3 id="u7BA1_u7406_u8005_u80FD_u5426_u7BA1_u7406_u597D_u522B_u4EBA_u4ECE_u6765_u5C31_u6CA1_u6709_u88AB_u771F_u6B63_u9A8C_u8BC1_u8FC7_uFF0C_u4F46_u7BA1_u7406_u8005_u5374_u5B8C_u5168_u53EF_u4EE5_u7BA1_u7406_u597D_u81EA_u5DF1_u3002"><a href="#u7BA1_u7406_u8005_u80FD_u5426_u7BA1_u7406_u597D_u522B_u4EBA_u4ECE_u6765_u5C31_u6CA1_u6709_u88AB_u771F_u6B63_u9A8C_u8BC1_u8FC7_uFF0C_u4F46_u7BA1_u7406_u8005_u5374_u5B8C_u5168_u53EF_u4EE5_u7BA1_u7406_u597D_u81EA_u5DF1_u3002" class="headerlink" title="管理者能否管理好别人从来就没有被真正验证过，但管理者却完全可以管理好自己。"></a>管理者能否管理好别人从来就没有被真正验证过，但管理者却完全可以管理好自己。</h3>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://5minuteswalk.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/categories/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重新上路]]></title>
    <link href="http://5minuteswalk.com/2016/09/05/%E9%87%8D%E6%96%B0%E4%B8%8A%E8%B7%AF/"/>
    <id>http://5minuteswalk.com/2016/09/05/重新上路/</id>
    <published>2016-09-05T14:04:19.000Z</published>
    <updated>2016-09-05T14:07:08.000Z</updated>
    <content type="html"><![CDATA[<p>混混沌沌的过的久了，忽然想要重新认识世界，是时候重新学会思考了。</p>
<p>上学的时候忙着应付学业和考试，没有心力独自思考。</p>
<p>工作之后，忙于应付老板和上级，没有心力独自思考。</p>
<p>现在是时候做出改变了，天地也不再是混混沌沌如鸡子了，有太多新奇的事物和信息，不停的涌入你的视线、脑海，无论你是否愿意。缤纷，多样，嘈杂……渐渐的也许会把我淹没。</p>
<p>好在某天某刻我醒了过来，我需要用自己的理论和思想重新划分世界，要去学习，要去认识，要去思考，要有自己的思想。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>混混沌沌的过的久了，忽然想要重新认识世界，是时候重新学会思考了。</p>
<p>上学的时候忙着应付学业和考试，没有心力独自思考。</p>
<p>工作之后，忙于应付老板和上级，没有心力独自思考。</p>
<p>现在是时候做出改变了，天地也不再是混混沌沌如鸡子了，有太多新奇的事]]>
    </summary>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/categories/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么是优秀的程序员]]></title>
    <link href="http://5minuteswalk.com/2016/08/26/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%98%E7%A7%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    <id>http://5minuteswalk.com/2016/08/26/什么是优秀的程序员/</id>
    <published>2016-08-26T14:57:00.000Z</published>
    <updated>2016-08-27T04:37:53.000Z</updated>
    <content type="html"><![CDATA[<p>最近看到有人在讨论什么才是优秀的程序员，正巧也在想这方面的事情，就把看到的和想到的一块整理记录下来，免得以后忘了，毕竟思想的火花是很珍贵的，哈哈。</p>
<h3 id="u4F18_u79C0_u7684_u7A0B_u5E8F_u5458_u80FD_u591F_u770B_u6E05_u81EA_u8EAB_u5728_u6280_u672F_u6D6A_u6F6E_u4E2D_u6240_u5904_u7684_u4F4D_u7F6E"><a href="#u4F18_u79C0_u7684_u7A0B_u5E8F_u5458_u80FD_u591F_u770B_u6E05_u81EA_u8EAB_u5728_u6280_u672F_u6D6A_u6F6E_u4E2D_u6240_u5904_u7684_u4F4D_u7F6E" class="headerlink" title="优秀的程序员能够看清自身在技术浪潮中所处的位置"></a>优秀的程序员能够看清自身在技术浪潮中所处的位置</h3><p>所谓的技术浪潮是指技术发展的阶段，一般在某项技术出现的初期，肯定会伴随大大小小的问题，这个时候作为开发人员，会遇到许许多多的困难和挑战，要做好解决问题的信心和勇气；而技术进入成熟阶段后，各方面的解决方案趋于完整，开发人员就会比较舒服，只要深入理解，不会有无法解决的问题阻挠着你；某项技术进入末期之后，开发人员对技术本身就不需要花费更多的精力了，此时这项技术只是一种工具，只需要会会使用即可，深入研究也不会带来更大的收益，因为马上就要有新技术来取代它，留点精力去折腾新东西吧。</p>
<p>作为一名优秀的程序员，应该能够分清技术浪潮的阶段，把握技术发展的脉络，这样才能保证自己不被一个又一个的浪头拍倒在沙滩上，把精力集中到正确的方向和位置，四两拨千斤。</p>
<h3 id="u4F18_u79C0_u7684_u7A0B_u5E8F_u5458_u80FD_u591F_u4F7F_u4ED6_u4EBA_u53D8_u5F97_u66F4_u597D"><a href="#u4F18_u79C0_u7684_u7A0B_u5E8F_u5458_u80FD_u591F_u4F7F_u4ED6_u4EBA_u53D8_u5F97_u66F4_u597D" class="headerlink" title="优秀的程序员能够使他人变得更好"></a>优秀的程序员能够使他人变得更好</h3><p>优秀的程序员在日常的工作中，理解问题域，探索出解决问题的方法，发现并确立最佳实践，然后能推己及人，带动他人、团队共同发展，一枝独秀带动万马奔腾。</p>
<h3 id="u4F18_u79C0_u7684_u7A0B_u5E8F_u5458_u80FD_u591F_u9884_u5224_u7CFB_u7EDF_u7684_u53D1_u5C55_u65B9_u5411"><a href="#u4F18_u79C0_u7684_u7A0B_u5E8F_u5458_u80FD_u591F_u9884_u5224_u7CFB_u7EDF_u7684_u53D1_u5C55_u65B9_u5411" class="headerlink" title="优秀的程序员能够预判系统的发展方向"></a>优秀的程序员能够预判系统的发展方向</h3><p>优秀的程序员能够根据公司当前的业务状况、发展方向，预判整个系统的设计架构的发展方向，有针对性的调整系统的技术方案，让系统更好的支撑公司的发展，不脱后腿。</p>
<p>和优秀的人一起工作，总是让人愉悦的，他们的技术、眼界、思考方式总是不拘一格，别出心裁。希望大家都能和优秀的人一起工作，享受工作，享受生活。如果身边的人不够优秀，那就让自己变得优秀，这样他们也会变得优秀，人无论做什么，总要有点追求。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近看到有人在讨论什么才是优秀的程序员，正巧也在想这方面的事情，就把看到的和想到的一块整理记录下来，免得以后忘了，毕竟思想的火花是很珍贵的，哈哈。</p>
<h3 id="u4F18_u79C0_u7684_u7A0B_u5E8F_u5458_u80FD_u591F_u77]]>
    </summary>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="杂谈" scheme="http://5minuteswalk.com/categories/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native之自定义下拉刷新]]></title>
    <link href="http://5minuteswalk.com/2016/08/24/React-Native%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/"/>
    <id>http://5minuteswalk.com/2016/08/24/React-Native之自定义下拉刷新/</id>
    <published>2016-08-24T13:51:25.000Z</published>
    <updated>2016-08-25T14:52:05.000Z</updated>
    <content type="html"><![CDATA[<p>React Native自身提供了基于UIRefreshControl的下拉刷新组件，难以个性化定制；开源社区中也有一些基于JS的解决方案，然而在用户体验上远逊于Native。如何在保证用户体验的前提下，为React Native定制个性化的下拉刷新就需要好好动动脑筋了。</p>
<p>社区现在有许多易用的下拉刷新组件，如<a href="https://github.com/CoderMJLee/MJRefresh" target="_blank" rel="external">https://github.com/CoderMJLee/MJRefresh</a>，那么我们能否在React Native中使用这些组件呢？仔细研究过RCTScrollView的代码后，经过一番试验，这是可行的。</p>
<p><strong><em>以下所有代码改动均基于React Native 0.30.0版本</em></strong></p>
<p>1.首先找到React Native自带的RCTScrollView.h、RCTScrollView.m、RCTScrollViewManager.h、RCTScrollViewManager.m（这四个文件通常位于./node_modules/react-native/React/Views目录下），为了便于修改，将这四个文件拷贝至工程目录下，添加进工程，同时将工程中pod安装的React Native中的四个文件的引用删除（目录为Pods/Development Pods/React/Core/React/Views/，右键-Delete-Remove Reference即可）。</p>
<p>2.在RCTScrollView.h实现中添加如下代码：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">// add pull to refresh</span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"><span class="comment">@property(nonatomic, copy) RCTDirectEventBlock onRefreshData;	// JS调用，下拉刷新触发时的回调</span></span><br><span class="line"><span class="comment">@property(nonatomic, assign) BOOL isOnPullToRefresh;	// JS调用，指定当前是否处于下拉刷新的状态</span></span><br><span class="line"><span class="comment">@property (assign, nonatomic) BOOL currentRefreshingState;	// Native使用，用于维护Native端ScrollView的下拉刷新的状态，仅仅使用isOnPullToRefresh来控制的话，会造成Native端状态紊乱，不停的触发下拉刷新</span></span><br><span class="line"><span class="comment">@property(nonatomic, assign) BOOL enablePullToRefresh;	// JS调用，ScrollView是否启用下拉刷新</span></span><br><span class="line"></span><br><span class="line">// 这个方法存在的意义在于首次进入页面，自动触发下拉刷新的状态。</span><br><span class="line">// 如果使用isOnPullToRefresh来控制，页面会不停的处于下拉刷新的状态，</span><br><span class="line">// 估计应该是isOnPullToRefresh和onRefreshData的时序状态有关系，</span><br><span class="line">// 所以需要一个触发下拉状态的方法</span><br><span class="line">- (void)startPullToRefresh;</span><br><span class="line">// 实际上没有用到这个方法，仅仅是为了配合startPullToRefresh，</span><br><span class="line">// 看起来一致、协调。。。</span><br><span class="line">- (void)stopPullToRefresh;</span><br></pre></td></tr></table></figure>
<p>3.在RCTScrollView.m实现中添加如下代码：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">// add pull to refresh</span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">- (void)setEnablePullToRefresh:(BOOL)enablePullToRefresh</span><br><span class="line">&#123;</span><br><span class="line">    _enablePullToRefresh = enablePullToRefresh;</span><br><span class="line">    if (enablePullToRefresh) &#123;</span><br><span class="line">        if (_scrollView.header == nil) &#123;</span><br><span class="line">            [_scrollView addGifHeaderWithRefreshingTarget:self refreshingAction:<span class="comment">@selector(refreshData)];</span></span><br><span class="line">            [self customRefreshHeaderView];</span><br><span class="line">            self.currentRefreshingState = NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)setIsOnPullToRefresh:(BOOL)isOnPullToRefresh</span><br><span class="line">&#123;</span><br><span class="line">    if (_currentRefreshingState != isOnPullToRefresh) &#123;</span><br><span class="line">        _currentRefreshingState = isOnPullToRefresh;</span><br><span class="line">        if (isOnPullToRefresh) &#123;</span><br><span class="line">            [_scrollView.header beginRefreshing];</span><br><span class="line">            </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            [_scrollView.header endRefreshing];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">// add pull to refresh</span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">-(void)refreshData</span><br><span class="line">&#123;</span><br><span class="line">    _currentRefreshingState = _scrollView.header.isRefreshing;</span><br><span class="line">    if (_onRefreshData) &#123;</span><br><span class="line">        _onRefreshData(nil);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">// add pull to refresh</span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">- (void)customRefreshHeaderView</span><br><span class="line">&#123;</span><br><span class="line">    // 隐藏时间</span><br><span class="line">    _scrollView.header.updatedTimeHidden = YES;</span><br><span class="line">    // 隐藏状态</span><br><span class="line">    _scrollView.header.stateHidden = YES;</span><br><span class="line">    </span><br><span class="line">    [self setRefreshHeaderImage];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">// add pull to refresh</span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">- (void)setRefreshHeaderImage</span><br><span class="line">&#123;</span><br><span class="line">    // 设置普通状态的动画图片</span><br><span class="line">    NSString <span class="keyword">*</span>idleImageName = [NSString stringWithFormat:<span class="comment">@"refresh_0"];</span></span><br><span class="line">    UIImage <span class="keyword">*</span>idleImage = [UIImage imageNamed:idleImageName];</span><br><span class="line">    [_scrollView.gifHeader setImages:<span class="comment">@[idleImage] forState:MJRefreshHeaderStateIdle];</span></span><br><span class="line">    </span><br><span class="line">    // 设置正在刷新状态的动画图片</span><br><span class="line">    NSMutableArray <span class="keyword">*</span>refreshingImages = [NSMutableArray array];</span><br><span class="line">    for (NSUInteger i = 1; i <span class="variable">&lt;= 12; i++) &#123;</span><br><span class="line">        NSString *imageName = [NSString stringWithFormat:@"refresh_%d",i];</span><br><span class="line">        UIImage *image = [UIImage imageNamed:imageName];</span><br><span class="line">        [refreshingImages addObject:image];</span><br><span class="line">    &#125;</span><br><span class="line">    [_scrollView.gifHeader setImages:refreshingImages forState:MJRefreshHeaderStateRefreshing];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ********************</span><br><span class="line">// add pull to refresh</span><br><span class="line">// ********************</span><br><span class="line">- (void)startPullToRefresh</span><br><span class="line">&#123;</span><br><span class="line">    self.isOnPullToRefresh = YES;</span><br><span class="line">    [_scrollView.header beginRefreshing];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ********************</span><br><span class="line">// add pull to refresh</span><br><span class="line">// ********************</span><br><span class="line">- (void)stopPullToRefresh</span><br><span class="line">&#123;</span><br><span class="line">    self.isOnPullToRefresh = NO;</span><br><span class="line">    [_scrollView.header endRefreshing];</span><br><span class="line">    </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>4.修改RCTCustomScrollView的- (void)dockClosestSectionHeader<br>方法实现，（RCTCustomScrollView位于RCTScrollView.m）</p>
<p>首先找个下面这一段代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_rctRefreshControl != nil &amp;&amp; _rctRefreshControl.refreshing) &#123;</span><br><span class="line">    scrollTop -= _rctRefreshControl.frame.<span class="built_in">size</span>.<span class="variable">height</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>然后在后面添加如下代码：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">// add pull to refresh</span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">if (self.header != nil &amp;&amp; self.header.isRefreshing) &#123;</span><br><span class="line">    scrollTop -= self.header.frame.size.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的目的是在ScrollView向上滑动的时候，保证Sticky Section Header处于正确的位置。</p>
<p>5.在RCTScrollViewManager.m中增加如下代码，方便ScrollView.js中调用：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">// add pull to refresh</span><br><span class="line">// <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line">RCT_EXPORT_VIEW_PROPERTY(onRefreshData, RCTDirectEventBlock)</span><br><span class="line">RCT_EXPORT_VIEW_PROPERTY(isOnPullToRefresh, BOOL)</span><br><span class="line">RCT_EXPORT_VIEW_PROPERTY(enablePullToRefresh, BOOL)</span><br><span class="line"></span><br><span class="line">RCT_EXPORT_METHOD(stopPullToRefresh:(nonnull NSNumber <span class="keyword">*</span>)reactTag)</span><br><span class="line">&#123;</span><br><span class="line">    [self.bridge.uiManager addUIBlock:</span><br><span class="line">     ^(__unused RCTUIManager <span class="keyword">*</span>uiManager, NSDictionary<span class="variable">&lt;NSNumber *, RCTScrollView *&gt;</span> <span class="keyword">*</span>viewRegistry) &#123;</span><br><span class="line">         </span><br><span class="line">         RCTScrollView <span class="keyword">*</span>view = viewRegistry[reactTag];</span><br><span class="line">         if (!view ||<span class="string"> ![view isKindOfClass:[RCTScrollView class]]) &#123;</span><br><span class="line">             RCTLogError(@"Cannot find RCTScrollView with tag #%@", reactTag);</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         [view stopPullToRefresh];</span><br><span class="line">     &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RCT_EXPORT_METHOD(startPullToRefresh:(nonnull NSNumber *)reactTag)</span><br><span class="line">&#123;</span><br><span class="line">    [self.bridge.uiManager addUIBlock:</span><br><span class="line">     ^(__unused RCTUIManager *uiManager, NSDictionary&lt;NSNumber *, RCTScrollView *&gt; *viewRegistry) &#123;</span><br><span class="line">         </span><br><span class="line">         RCTScrollView *view = viewRegistry[reactTag];</span><br><span class="line">         if (!view </span>||<span class="string"> ![view isKindOfClass:[RCTScrollView class]]) &#123;</span><br><span class="line">             RCTLogError(@"Cannot find RCTScrollView with tag #%@", reactTag);</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         [view startPullToRefresh];</span><br><span class="line">     &#125;];</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>6.修改React Native自带的ScrollView.js（通常位于./node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js），增加上面添加的属性、方法对应的props和函数：</p>
<p>增加props：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * pull to refresh</span><br><span class="line"> */</span></span><br><span class="line">enablePullToRefresh: PropTypes<span class="class">.bool</span>,</span><br><span class="line">isOnPullToRefresh: PropTypes<span class="class">.bool</span>,</span><br><span class="line">onRefreshData: PropTypes<span class="class">.func</span>,</span><br></pre></td></tr></table></figure>
<p>增加函数：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">startPullToRefresh: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  RCTScrollViewManager.startPullToRefresh(</span><br><span class="line">      ReactNative.findNodeHandle(<span class="keyword">this</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">stopPullToRefresh: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  RCTScrollViewManager.stopPullToRefresh(</span><br><span class="line">      ReactNative.findNodeHandle(<span class="keyword">this</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>7.大功告成，接下来只需要在JS端调用即可，代码如下：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListView</span><br><span class="line">    dataSource=&#123;<span class="keyword">this</span>.dataSource.cloneWithRowsAndSections(<span class="keyword">this</span>.props.dataSource)&#125;</span><br><span class="line">    renderRow=&#123;<span class="keyword">this</span>._renderRow&#125;</span><br><span class="line">    renderSectionHeader=&#123;<span class="keyword">this</span>._renderSectionHeader&#125;</span><br><span class="line">    renderSeparator=&#123;<span class="keyword">this</span>._renderSeparator&#125;</span><br><span class="line">    enableEmptySections=&#123;<span class="keyword">true</span>&#125;</span><br><span class="line">    enablePullToRefresh=&#123;<span class="keyword">true</span>&#125;</span><br><span class="line">    isOnPullToRefresh=&#123;<span class="keyword">this</span>.props.isRefreshing&#125;</span><br><span class="line">    onRefreshData=&#123;() =&gt; &#123;</span><br><span class="line">        <span class="comment">// 刷新数据逻辑</span></span><br><span class="line">        <span class="keyword">this</span>.props.onRefresh &amp;&amp; <span class="keyword">this</span>.props.onRefresh();</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>
<p>8.总结</p>
<p>经过上面的这些代码新增和修改，我们已经为React Native添加了完全自定义pull to refresh的功能，React Native的下拉刷新也可以绚丽多彩，如丝般顺滑了，cheers！</p>
<p>有得必有失，需要考量的是，这种对于React Native代码的深度定制不利于后续React Native的版本升级，每次升级版本的时候都要同步修改，同时比对一下React Native原文件的变动是否会影响我们的定制，一切都是权衡、折衷、妥协！</p>
<p><strong><em>请勿转载</em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>React Native自身提供了基于UIRefreshControl的下拉刷新组件，难以个性化定制；开源社区中也有一些基于JS的解决方案，然而在用户体验上远逊于Native。如何在保证用户体验的前提下，为React Native定制个性化的下拉刷新就需要好好动动脑筋了。<]]>
    </summary>
    
      <category term="React Native" scheme="http://5minuteswalk.com/tags/React-Native/"/>
    
      <category term="iOS" scheme="http://5minuteswalk.com/tags/iOS/"/>
    
      <category term="React Native" scheme="http://5minuteswalk.com/categories/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native之复用原生UI组件]]></title>
    <link href="http://5minuteswalk.com/2016/01/18/React-Native%E4%B9%8B%E5%A4%8D%E7%94%A8%E5%8E%9F%E7%94%9FUI%E7%BB%84%E4%BB%B6/"/>
    <id>http://5minuteswalk.com/2016/01/18/React-Native之复用原生UI组件/</id>
    <published>2016-01-18T14:38:00.000Z</published>
    <updated>2016-03-20T14:43:20.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://moduscreate.com/leverage-existing-ios-views-react-native-app/" target="_blank" rel="external">Leverage Existing iOS Views In Your React Native App</a></p>
<p><img src="http://moduscreate.com/wp-content/uploads/2015/10/StanRNscreenshot.png" alt=""></p>
<a id="more"></a>
<p>当React Native还在蹒跚学步的时候，自2008年3月开始的iOS原生应用开发已经走过了6个年头，正是君生我未生，我生君已老。然而老的好处就在于积累了许多的经验感悟，往往可以做到事半功倍。这么些年以来，iOS开发者向社区贡献了大量的开源组件，奋战在一线的APP开发公司也积累了恒河沙数的各种工具、类库。更重要的是苹果公司为原生应用开发提供了大量的基础组件。今天我们研究一下如何在React Native中使用iOS原生的UI View Controller。</p>
<h3 id="u753B_u4E2AAPP_u8349_u56FE_u5148"><a href="#u753B_u4E2AAPP_u8349_u56FE_u5148" class="headerlink" title="画个APP草图先"></a>画个APP草图先</h3><p>为了弄明白React Native中怎么调用iOS原生View Controller，我们先来确定一下本文中原生APP应该长个什么样。下图左侧，是将要显示在屏幕上的原生View Controller，它可以和右侧的React Native代码互相通信。</p>
<p><img src="http://moduscreate.com/wp-content/uploads/2015/10/image001.png" alt=""></p>
<p>我们需要创建一个React Native的模块（原生组件）来封装原生View Controller，以便于在React Native中使用它，以及二者之间的互相通信。如下图所示：</p>
<p><img src="http://moduscreate.com/wp-content/uploads/2015/10/image002.png" alt=""></p>
<p>在深入介绍之前，我们先来了解一下标准React Native iOS应用的组织结构。如下图所示：</p>
<p><img src="http://moduscreate.com/wp-content/uploads/2015/10/image003.png" alt=""></p>
<p>其中最重要的一个组件是UIViewController的实例。（AppDelegate中的rootViewController）</p>
<p>下一步要做的是把rootViewController作为AppDelegate的属性对外提供。这样其他的类就可以引用rootViewController，本文中就是指那些显示在屏幕上的UIViewController的实例。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> : <span class="title">UIResponder</span> &lt;<span class="title">UIApplicationDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIWindow</span> *window;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIViewController</span> *rootViewController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">                                                      moduleName:<span class="string">@"MCDJ"</span></span><br><span class="line">                                               initialProperties:<span class="literal">nil</span></span><br><span class="line">                                                   launchOptions:launchOptions];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">self</span><span class="variable">.window</span> = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen]<span class="variable">.bounds</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">UIViewController</span> *rootViewController = [[<span class="built_in">UIViewController</span> alloc] init];</span><br><span class="line">  rootViewController<span class="variable">.view</span> = rootView;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">self</span><span class="variable">.window</span><span class="variable">.rootViewController</span> = rootViewController;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Set reference to class property</span></span><br><span class="line">  <span class="keyword">self</span><span class="variable">.rootViewController</span> = rootViewController;</span><br><span class="line"></span><br><span class="line">  [<span class="keyword">self</span><span class="variable">.window</span> makeKeyAndVisible];</span><br></pre></td></tr></table></figure>
<h3 id="u539F_u751F_u7EC4_u4EF6_u6765_u4E86"><a href="#u539F_u751F_u7EC4_u4EF6_u6765_u4E86" class="headerlink" title="原生组件来了"></a>原生组件来了</h3><p>现在我们已经可以在外部引用rootViewController，是时候创建一个原生组件来包装我们想要在React Native中使用的view了。我们拿MPMediaPickerController作为栗子。MPMediaPickerController是用来显示iOS媒体库的，它是UIViewController的子类。MPMediaPickerController就是为了做栗子而生的，它是modal controller，同时也实现了MPMediaPickerControllerDelegate代理，正合我用。</p>
<p>下面是MediaController的样例。<br>注意：为了支持选择播放音频，需要引入AVAudioPlayer。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"RCTBridge.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"RCTEventDispatcher.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">@import <span class="built_in">AVFoundation</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MediaController</span> : <span class="title">NSObject</span>&lt;<span class="title">RCTBridgeModule</span>,<span class="title">MPMediaPickerControllerDelegate</span>, <span class="title">AVAudioPlayerDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, retain) <span class="built_in">AVAudioPlayer</span> *player;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, retain) <span class="built_in">MPMediaPickerController</span> *mediaPicker;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) showMediaPicker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>下面的代码是两个主要的功能一些实现代码：</p>
<p>1 显示和隐藏媒体库</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)showMediaPicker &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">self</span><span class="variable">.mediaPicker</span> == <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mediaPicker</span> = [[<span class="built_in">MPMediaPickerController</span> alloc] initWithMediaTypes:<span class="built_in">MPMediaTypeAnyAudio</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mediaPicker</span> setDelegate:<span class="keyword">self</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mediaPicker</span> setAllowsPickingMultipleItems:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mediaPicker</span> setShowsCloudItems:<span class="literal">NO</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mediaPicker</span><span class="variable">.prompt</span> = <span class="string">@"Select song"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  AppDelegate *delegate = (AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate];</span><br><span class="line">  [delegate<span class="variable">.rootViewController</span> presentViewController:<span class="keyword">self</span><span class="variable">.mediaPicker</span> animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> hideMediaPicker() &#123;</span><br><span class="line">  AppDelegate *delegate = (AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate];</span><br><span class="line">  [delegate<span class="variable">.rootViewController</span> dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2 MPMediaPickerController与React Native通信</p>
<p>下面的代码是原生组件通过RCTBridge发出SongPlaying事件，并带上文件名称。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">void</span>) mediaPicker:(<span class="built_in">MPMediaPickerController</span> *)mediaPicker didPickMediaItems:(<span class="built_in">MPMediaItemCollection</span> *)mediaItemCollection &#123;</span><br><span class="line">  <span class="built_in">MPMediaItem</span> *mediaItem = mediaItemCollection<span class="variable">.items</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">NSURL</span> *assetURL = [mediaItem valueForProperty:<span class="built_in">MPMediaItemPropertyAssetURL</span>];</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">self</span><span class="variable">.bridge</span><span class="variable">.eventDispatcher</span> sendAppEventWithName:<span class="string">@"SongPlaying"</span> body:[mediaItem valueForProperty:<span class="built_in">MPMediaItemPropertyTitle</span>]];</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面的代码是React Native端订阅事件，并根据事件更新状态。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"><span class="keyword">var</span> MediaController = <span class="built_in">require</span>(<span class="string">'NativeModules'</span>).MediaController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  AppRegistry,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Text,</span><br><span class="line">  TouchableHighlight,</span><br><span class="line">  View,</span><br><span class="line">  NativeAppEventEmitter</span><br><span class="line">&#125; = React;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MCDJ</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="keyword">this</span>.getInitialState();</span><br><span class="line">        <span class="keyword">this</span>.bindMethods();</span><br><span class="line">    &#125;</span><br><span class="line">    bindMethods() &#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">this</span>.bindableMethods) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> methodName <span class="keyword">in</span> <span class="keyword">this</span>.bindableMethods) &#123;</span><br><span class="line">            <span class="keyword">this</span>[methodName] = <span class="keyword">this</span>.bindableMethods[methodName].bind(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getInitialState() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            songPlaying : <span class="string">'None'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// Add Event Listener for SongPlaying event from MediaController</span></span><br><span class="line">        NativeAppEventEmitter.addListener(<span class="string">'SongPlaying'</span>, (songName) =&gt; <span class="keyword">this</span>.setState(&#123;songPlaying : songName&#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>下面是MediaController的代码实现，仅供参考。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"MediaController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AppDelegate.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MediaController</span></span></span><br><span class="line"></span><br><span class="line">RCT_EXPORT_MODULE();</span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> bridge = _bridge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)showMediaPicker &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">self</span><span class="variable">.mediaPicker</span> == <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mediaPicker</span> = [[<span class="built_in">MPMediaPickerController</span> alloc] initWithMediaTypes:<span class="built_in">MPMediaTypeAnyAudio</span>];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mediaPicker</span> setDelegate:<span class="keyword">self</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mediaPicker</span> setAllowsPickingMultipleItems:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mediaPicker</span> setShowsCloudItems:<span class="literal">NO</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mediaPicker</span><span class="variable">.prompt</span> = <span class="string">@"Select song"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  AppDelegate *delegate = (AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate];</span><br><span class="line">  [delegate<span class="variable">.rootViewController</span> presentViewController:<span class="keyword">self</span><span class="variable">.mediaPicker</span> animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) mediaPicker:(<span class="built_in">MPMediaPickerController</span> *)mediaPicker didPickMediaItems:(<span class="built_in">MPMediaItemCollection</span> *)mediaItemCollection &#123;</span><br><span class="line">  <span class="built_in">MPMediaItem</span> *mediaItem = mediaItemCollection<span class="variable">.items</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">NSURL</span> *assetURL = [mediaItem valueForProperty:<span class="built_in">MPMediaItemPropertyAssetURL</span>];</span><br><span class="line">  </span><br><span class="line">  [<span class="keyword">self</span><span class="variable">.bridge</span><span class="variable">.eventDispatcher</span> sendAppEventWithName:<span class="string">@"SongPlaying"</span> body:[mediaItem valueForProperty:<span class="built_in">MPMediaItemPropertyTitle</span>]];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">NSError</span> *error;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">self</span><span class="variable">.player</span> = [[<span class="built_in">AVAudioPlayer</span> alloc] initWithContentsOfURL:assetURL error:&amp;error];</span><br><span class="line">  [<span class="keyword">self</span><span class="variable">.player</span> setDelegate:<span class="keyword">self</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [error localizedDescription]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> play];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hideMediaPicker();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) mediaPickerDidCancel:(<span class="built_in">MPMediaPickerController</span> *)mediaPicker &#123;</span><br><span class="line">  hideMediaPicker();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark RCT_EXPORT</span></span><br><span class="line"></span><br><span class="line">RCT_EXPORT_METHOD(showSongs) &#123;</span><br><span class="line">  [<span class="keyword">self</span> showMediaPicker];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark private-methods</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> hideMediaPicker() &#123;</span><br><span class="line">  AppDelegate *delegate = (AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate];</span><br><span class="line">  [delegate<span class="variable">.rootViewController</span> dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://moduscreate.com/leverage-existing-ios-views-react-native-app/">Leverage Existing iOS Views In Your React Native App</a></p>
<p><img src="http://moduscreate.com/wp-content/uploads/2015/10/StanRNscreenshot.png" alt=""></p>]]>
    
    </summary>
    
      <category term="React Native" scheme="http://5minuteswalk.com/tags/React-Native/"/>
    
      <category term="iOS" scheme="http://5minuteswalk.com/tags/iOS/"/>
    
      <category term="React Native" scheme="http://5minuteswalk.com/categories/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React-Native之Bridge]]></title>
    <link href="http://5minuteswalk.com/2016/01/16/React-Native%E4%B9%8BBridge/"/>
    <id>http://5minuteswalk.com/2016/01/16/React-Native之Bridge/</id>
    <published>2016-01-15T16:02:00.000Z</published>
    <updated>2016-03-20T14:43:29.000Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://tadeuzagallo.com/blog/react-native-bridge/" target="_blank" rel="external">BRIDGING IN REACT NATIVE</a></p>
<p>本文假定读者了解React Native开发，并且想了解Native和JavaScript通信的内部机制。</p>
<a id="more"></a>
<h2 id="Main_Threads"><a href="#Main_Threads" class="headerlink" title="Main Threads"></a>Main Threads</h2><p>开始之前，我们先介绍一下React Native中的三种<strong><em>main thread</em></strong>：</p>
<ul>
<li><strong>shadow queue</strong>：页面元素布局在这进行</li>
<li><strong>main thread</strong>：UIKit 运行的所在的线程</li>
<li><strong>JavaScript thread</strong>：运行JS代码时所处的线程</li>
</ul>
<p>此外，每个Native module都有各自独立的<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html" target="_blank" rel="external">GCD Queue</a>，你也可以指定Native module运行的GCD queue（后面会详细介绍）。</p>
<p>*”shadow queue”实际上是一个GCD Queue，而不是一个线程。</p>
<h2 id="Native_Modules"><a href="#Native_Modules" class="headerlink" title="Native Modules"></a>Native Modules</h2><p><em>如果还不知道怎么创建一个Native Module，建议你先去阅读一下相关的<a href="http://facebook.github.io/react-native/docs/native-modules-ios.html#content" target="_blank" rel="external">文档</a>。</em></p>
<p>下面我们定义一个示例的Native Module：<strong>Person</strong>，既可以接受JS端调用，也可以调用JS端代码。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span> &lt;<span class="title">RCTBridgeModule</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Logger</span></span></span><br><span class="line"></span><br><span class="line">RCT_EXPORT_MODULE()</span><br><span class="line"></span><br><span class="line">RCT_EXPORT_METHOD(greet:(<span class="built_in">NSString</span> *)name)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"Hi, %@!"</span>, name);</span><br><span class="line">  [_bridge<span class="variable">.eventDispatcher</span> sendAppEventWithName:<span class="string">@"greeted"</span></span><br><span class="line">                                           body:@&#123; <span class="string">@"name"</span>: name &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>我们先来看看<strong><code>RCT_EXPORT_MODULE</code></strong>,<strong><code>RCT_EXPORT_METHOD</code></strong>这两个宏，它们最终会生成什么代码，它们的角色是什么，在此基础上它们如何工作。</p>
<h2 id="RCT_EXPORT_MODULE_28_5Bjs_name_5D_29"><a href="#RCT_EXPORT_MODULE_28_5Bjs_name_5D_29" class="headerlink" title="RCT_EXPORT_MODULE([js_name])"></a><code>RCT_EXPORT_MODULE([js_name])</code></h2><p>从名字上看，它可以exports modules，那么在这export的作用究竟是什么呢？export的作用就是让bridge知道有一个module可以被JS调用了。</p>
<p>以下是它的宏定义：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> RCT_EXPORT_MODULE(js_name) \</span></span><br><span class="line">	<span class="function">RCT_EXTERN <span class="keyword">void</span> <span class="title">RCTRegisterModule</span>(<span class="params">Class</span>)</span>; \</span><br><span class="line">	+ (NSString \*)moduleName &#123; <span class="keyword">return</span> @<span class="preprocessor">#js_name; &#125; \</span></span><br><span class="line">	+ (<span class="keyword">void</span>)load &#123; RCTRegisterModule(self); &#125;</span><br></pre></td></tr></table></figure>
<p>主要做了以下这些事情：</p>
<ul>
<li>首先声明<strong>extern</strong>的函数<strong>RCTRegisterModule</strong>，也就意味着对于编译器，函数实现当前是不可见的，直到链接时才可用。然后</li>
<li>声明方法<strong>moduleName</strong>，它的返回值是<strong>js_name</strong>（宏的参数，可选）。如果你想在JS端使用和objc端不同的module名称，需要传非空的js_name。最后</li>
<li>声明方法<strong>load</strong>（当app被加载进内存的时候，会调用每个类的<strong>load</strong>方法），它会调用前面定义的<strong>RCTRegisterModule</strong>函数，告诉bridge我们定义了这个module。</li>
</ul>
<h2 id="RCT_EXPORT_METHOD_28method_29"><a href="#RCT_EXPORT_METHOD_28method_29" class="headerlink" title="RCT_EXPORT_METHOD(method)"></a><code>RCT_EXPORT_METHOD(method)</code></h2><p>这个宏更有趣，它本身并没有给你定义的mdule方法添加任何东西，除了你定义的方法，它额外生成了一个新方法。</p>
<p>这个新方法看起来就像下面这样：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="constant">NSArray</span> *)__rct_export__120</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="annotation">@[ @<span class="string">""</span>, @<span class="string">"log:(NSString *)message"</span> ]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>这是什么黑魔法？是不是很不可思议</em>。</p>
<p>方法名由三部分组成：前缀（<strong><code>__rct_export__</code></strong>），可选的<strong>js_name</strong>（当前示例为空），原方法的声明的行号（通过<strong><code>__COUNTER__</code></strong>获取，当前示例是12）。</p>
<p>新方法的目的是返回一个由原方法<strong>js_name</strong>（当前示例为空）和原方法签名组成的数组。新方法的名的特殊组成方式是为了避免方法冲突*。</p>
<p><em>*如果使用了category，技术上来说两个方法名相同是有可能的。但很可能不会导致任何预期的行为，尽管Xcode会警告有一个意料外的行为</em>。</p>
<h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>上述所有的设置都是为了让bidge知道所有的export的module和method，这些都发生在APP被加载进内存的时候。现在我们来看看runtime的时候发生了什么。</p>
<p>下面是bridge的初始化时的流程图：<br><img src="http://tadeuzagallo.com/blog/assets/img/initialisation.svg" alt="bridge initialisation dependency graph"></p>
<h2 id="u521D_u59CB_u5316Module"><a href="#u521D_u59CB_u5316Module" class="headerlink" title="初始化Module"></a>初始化Module</h2><p><strong>RCTRegisterModule</strong>的作用是把export的类（module）添加进module数组，这样稍后生成新bridge实例的时候，bridge可以找到这些module。在bridge生成的过程中，会遍历module数组，为每一个module创建实例引用，并把引用存储在bridge上，同时也会给每个module实例添加一个bridge的引用（为了在module中调用bridge），然后检查module有没有指定运行的<strong>queue</strong>，没有就给它创建一个新的queue，保证每个module运行在不同的queue之中。</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NSMutableDictionary *modulesByName; <span class="comment">// = ...</span></span><br><span class="line"><span class="keyword">for</span> (Class moduleClass <span class="keyword">in</span> RCTGetModuleClasses()) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">module</span> = [moduleClass <span class="keyword">new</span>];</span><br><span class="line">  <span class="keyword">if</span> ([<span class="keyword">module</span> respondsToSelector:<span class="annotation">@selector</span>(setBridge:)]) &#123;</span><br><span class="line">    <span class="keyword">module</span>.bridge = self;</span><br><span class="line">  &#125;</span><br><span class="line">  modulesByName[moduleName] = <span class="keyword">module</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u914D_u7F6Emodule"><a href="#u914D_u7F6Emodule" class="headerlink" title="配置module"></a>配置module</h2><p>当所有的module实例创建完成之后，我们会在后台线程中继续遍历每一个module的所有方法，调用以<strong><code>__rct_export__</code></strong>开头的方法，获取到export的方法的方法签名的字符串标识。这样做的目的在于我们可以获得方法中每一个参数的类型，而在runtime时我们只能知道参数的类型是<strong>id</strong>。本例中通过这种方式我们可以知道参数的实际类型是<strong>NSString *</strong>。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">unsigned <span class="type">int</span> methodCount;</span><br><span class="line"><span class="type">Method</span> *methods = class_copyMethodList(moduleClass, &amp;methodCount);</span><br><span class="line"><span class="keyword">for</span> (unsigned <span class="type">int</span> i = <span class="number">0</span>; i &lt; methodCount; i++) &#123;</span><br><span class="line">  <span class="type">Method</span> <span class="keyword">method</span> = methods[i];</span><br><span class="line">  <span class="type">SEL</span> selector = method_getName(<span class="keyword">method</span>);</span><br><span class="line">  <span class="keyword">if</span> ([<span class="type">NSStringFromSelector</span>(selector) hasPrefix:@<span class="string">"__rct_export__"</span>]) &#123;</span><br><span class="line">    <span class="type">IMP</span> imp = method_getImplementation(<span class="keyword">method</span>);</span><br><span class="line">    <span class="type">NSArray</span> *entries = ((<span class="type">NSArray</span> *(*)(id, <span class="type">SEL</span>))imp)(_moduleClass, selector);</span><br><span class="line">    //...</span><br><span class="line">    [moduleMethods addObject:/* <span class="type">Object</span> representing the <span class="keyword">method</span> */];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u8BBE_u7F6EJS_u6267_u884C_u5668"><a href="#u8BBE_u7F6EJS_u6267_u884C_u5668" class="headerlink" title="设置JS执行器"></a>设置JS执行器</h2><p>JS执行器有一个<strong>-setUp</strong>方法，这个方法在后台线程执行，可以做一些代价较高的工作，比如说初始化JavaScriptCore等。由于只有活跃的JS执行器才会接收到<strong>setUp</strong>的调用，而不是所有可用的JS执行器，因此也避免了一些不必要的操作。</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JSGlobalContextRef ctx = JSGlobalContextCreate(NULL)<span class="comment">;</span></span><br><span class="line">_context = [[RCTJavaScriptContext alloc] initWithJSContext:ctx]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>##注入JSON配置文件</p>
<p>包含module信息的JSON配置文件格式如下：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;</span><br><span class="line">  <span class="string">"remoteModuleConfig"</span>: <span class="collection">&#123;</span><br><span class="line">    <span class="string">"Logger"</span>: <span class="collection">&#123;</span><br><span class="line">      <span class="string">"constants"</span>: <span class="collection">&#123; /* If we had exported constants... */ &#125;</span>,</span><br><span class="line">      <span class="string">"moduleID"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"methods"</span>: <span class="collection">&#123;</span><br><span class="line">        <span class="string">"requestPermissions"</span>: <span class="collection">&#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"remote"</span>,</span><br><span class="line">          <span class="string">"methodID"</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span></span><br><span class="line">      &#125;</span></span><br><span class="line">    &#125;</span></span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>JSON配置文件作为一个全局变量存储在JavaScript VM中，当JS端的bridge初始化的时候使用这些配置来创建module。</p>
<h2 id="u52A0_u8F7DJS_u4EE3_u7801"><a href="#u52A0_u8F7DJS_u4EE3_u7801" class="headerlink" title="加载JS代码"></a>加载JS代码</h2><p>这个过程很直观，就是从指定的来源加载源码。通常情况下，开发阶段从packager获取，线上运行时从硬盘上获取。</p>
<h2 id="u6267_u884CJS_u4EE3_u7801"><a href="#u6267_u884CJS_u4EE3_u7801" class="headerlink" title="执行JS代码"></a>执行JS代码</h2><p>初始化工作全部完成以后，我们就可以把app源码加载进JavaScript VM了，具体过程是复制源码，解释执行。初始执行的时候会注册所有的CommonJS module，然后请求入口文件。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">JSValueRef jsError = NULL<span class="comment">;</span></span><br><span class="line">JSStringRef execJSString = JSStringCreateWithCFString<span class="list">(<span class="list">(<span class="keyword">__bridge</span></span><br><span class="line">      CFStringRef)</span>script)</span><span class="comment">;</span></span><br><span class="line">JSStringRef jsURL = JSStringCreateWithCFString<span class="list">(<span class="list">(<span class="keyword">__bridge</span></span><br><span class="line">      CFStringRef)</span>sourceURL.absoluteString)</span><span class="comment">;</span></span><br><span class="line">JSValueRef result = JSEvaluateScript<span class="list">(<span class="keyword">strongSelf-&gt;_context</span>.ctx,</span><br><span class="line">    execJSString, NULL, jsURL, <span class="number">0</span>, <span class="keyword">&amp;jsError</span>)</span><span class="comment">;</span></span><br><span class="line">JSStringRelease<span class="list">(<span class="keyword">jsURL</span>)</span><span class="comment">;</span></span><br><span class="line">JSStringRelease<span class="list">(<span class="keyword">execJSString</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="JS_u7AEF_u8C03_u7528module"><a href="#JS_u7AEF_u8C03_u7528module" class="headerlink" title="JS端调用module"></a>JS端调用module</h2><p>module由上述的JSON配置文件生成后，在JS端可以通过<strong>react-native</strong>对象的<strong>NativeModules</strong>调用。示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; NativeModules &#125; = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</span><br><span class="line"><span class="keyword">var</span> &#123; Person &#125; = NativeModules;</span><br><span class="line"></span><br><span class="line">Person.greet(<span class="string">'Tadeu'</span>);</span><br></pre></td></tr></table></figure>
<p>示例代码的运行原理是：JS端发起module方法的调用，进入一个队列，获取调用所需的信息：module名称、方法名称、方法参数，信息获取完成之后交还给JS端执行调用。</p>
<h2 id="u8C03_u7528_u5468_u671F"><a href="#u8C03_u7528_u5468_u671F" class="headerlink" title="调用周期"></a>调用周期</h2><p>使用示例代码调用module时的整个流程如下图所示：</p>
<p><img src="http://tadeuzagallo.com/blog/assets/img/graph.svg" alt="call cycle"></p>
<p>调用始于JS端的本地*JS代码调用，本地JS代码期间：由于调用了<strong>NativeModules</strong>上的方法，调用进入Native端的执行队列。JS端代码发起方法调用结束后，Native端遍历队列中的所有调用并执行对应方法，执行完成后，回JS端回调函数，把处理权转移到JS端，或者通过bridge调用JS端（使用Native端module的<strong>_bridge</strong>引用调用<strong>enqueueJSCall:args:</strong>），把处理权转移到JS端。</p>
<p>*上图只描述了JS执行中的某一个时刻。</p>
<p><strong>注意</strong>：如果你之前曾经关注过项目，可能知道还有一个native–&gt;JS的调用队列，每次vSYNC的时候队列都会被分发，但是为了提高启动速度，这个队列已经被移除了。</p>
<h2 id="u53C2_u6570_u7C7B_u578B"><a href="#u53C2_u6570_u7C7B_u578B" class="headerlink" title="参数类型"></a>参数类型</h2><p>对于从Native端—&gt;JS端的调用，参数类型更容易处理，所有的参数放进<strong>NSArray</strong>，然后被编码成JSON格式。但是对于从JS端—&gt;Native端的调用，为了校验数据类型（int、float、char…），我们需要原生的数据类型。但是对于任意的对象（和结构体），runtime无法通过<strong>NSMethidSignature</strong>提供足够的类型信息。如果你还记得的话，我们已经把参数类型信息作为字符串存下来了。</p>
<p>我们用正则表达式从方法前面里提取出类型信息，然后用<strong><u>RCTConvert</u></strong>功能类转换对象。RCTConvert为所有支持的默认类型提供了转换方法，可以把JSON格式的输入转换成期望的类型。</p>
<p>我们用<strong><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/#//apple_ref/c/func/objc_msgSend" target="_blank" rel="external">objc_msgSend</a></strong>进行RCTConvert方法的动态调用。如果参数类型是<strong>struct</strong>，由于<strong>arm64</strong>没有提供<strong><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/#//apple_ref/c/func/objc_msgSend_stret" target="_blank" rel="external">objc_msgSend_stret</a></strong>的实现，我们用<strong><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSInvocation_Class/" target="_blank" rel="external">NSInvocation</a></strong>调用。</p>
<p>获取到所有的参数之后，通过<strong>NSInvocation</strong>调用目标的module和方法。</p>
<p>下面是一个栗子：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// If you had the following method in a given module, e.g. <span class="code">`MyModule`</span></span><br><span class="line">RCT<span class="emphasis">_EXPORT_</span>METHOD(methodWithArray:(NSArray *) size:(CGRect)size) &#123;&#125;</span><br><span class="line"></span><br><span class="line">// And called it from JS, like:</span><br><span class="line">require('NativeModules').MyModule.method(['a', 1], &#123;</span><br><span class="line">  x: 0,</span><br><span class="line">  y: 0,</span><br><span class="line">  width: 200,</span><br><span class="line">  height: 100</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// The JS queue sent to native would then look like the following:</span><br><span class="line">// <span class="strong">** Remember that it's a queue of calls, so all the fields are arrays **</span></span><br><span class="line">@[</span><br><span class="line">  @[ @0 ], // module IDs</span><br><span class="line">  @[ @1 ], // method IDs</span><br><span class="line">  @[       // arguments</span><br><span class="line"><span class="code">    @[</span></span><br><span class="line"><span class="code">      @[@"a", @1],</span></span><br><span class="line"><span class="code">      @&#123; @"x": @0, @"y": @0, @"width": @200, @"height": @100 &#125;</span></span><br><span class="line"><span class="code">    ]</span></span><br><span class="line">  ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// This would convert into the following calls (pseudo code)</span><br><span class="line">NSInvocation call</span><br><span class="line">call[<span class="link_label">args</span>][<span class="link_reference">0</span>] = GetModuleForId(@0)</span><br><span class="line">call[<span class="link_label">args</span>][<span class="link_reference">1</span>] = GetMethodForId(@1)</span><br><span class="line">call[<span class="link_label">args</span>][<span class="link_reference">2</span>] = obj_msgSend(RCTConvert, NSArray, @[@"a", @1])</span><br><span class="line">call[<span class="link_label">args</span>][<span class="link_reference">3</span>] = NSInvocation(RCTConvert, CGRect, @&#123; @"x": @0, ... &#125;)</span><br><span class="line">call()</span><br></pre></td></tr></table></figure>
<h2 id="u7EBF_u7A0B"><a href="#u7EBF_u7A0B" class="headerlink" title="线程"></a>线程</h2><p>根据前面提到的， 默认每个module都有各自的<strong><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html" target="_blank" rel="external">GCD queue</a></strong>。如果想为module指定运行的queue，需要实现<strong>-methodQueue</strong>方法或者synthesize <strong>methodQueue</strong>属性。继承自<strong><a href="https://github.com/facebook/react-native/blob/master/React/Views/RCTViewManager.m" target="_blank" rel="external">RCTViewManager</a></strong>的<strong>View Managers</strong>*是例外，这些View Managers默认使用<strong>Shadow Queue</strong>，还有一个<strong>RCTJSThread</strong>比较特别，它仅仅是一个占位符，实际上它是指一个<strong>线程</strong>而不是一个<strong>队列</strong>。</p>
<p><strong>*View Managers</strong>实际上也不是例外，它们的基类中显示指定了shadow queue作为目标队列。</p>
<p>目前的线程相关的约定如下：</p>
<ul>
<li><strong>-init</strong>和<strong>-setBridge</strong>的调用在主线程进行；</li>
<li>所有的export的方法调用在指定的队列执行；</li>
<li>如果实现了<strong><a href="https://github.com/facebook/react-native/blob/master/React/Base/RCTInvalidating.h" target="_blank" rel="external">RCTInvalidating</a></strong>协议，<strong>invalidate</strong>的调用在指定的队列执行；</li>
<li><strong>-dealloc</strong>方法在哪个线程调用视情况而定。</li>
</ul>
<p>当Native端收到JS端的批量方法调用时，这些方法调用根据目标队列放入各自组中，并行分发调用。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// group `calls` by `queue` in `buckets`</span></span><br><span class="line"><span class="keyword">for</span> (id <span class="built_in">queue</span> in buckets) &#123;</span><br><span class="line">  <span class="keyword">dispatch_block_t</span> block = ^&#123;</span><br><span class="line">    NSOrderedSet *calls = [buckets objectForKey:<span class="built_in">queue</span>];</span><br><span class="line">    <span class="keyword">for</span> (NSNumber *indexObj in calls) &#123;</span><br><span class="line">      <span class="comment">// Actually call</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">queue</span> == RCTJSThread) &#123;</span><br><span class="line">    [_javaScriptExecutor executeBlockOnJavaScriptQueue:block];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">queue</span>) &#123;</span><br><span class="line">    dispatch_async(<span class="built_in">queue</span>, block);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h2><p>上面这些我们大概讲解了一下brigde的工作机制。希望能够对想创建复杂的module或者想要贡献核心代码的同学们提供一些帮助。</p>
<p>如果还有不清晰、不深入的地方，或者想知道一些其他的任何东西，不要犹豫，快来找我吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://tadeuzagallo.com/blog/react-native-bridge/">BRIDGING IN REACT NATIVE</a></p>
<p>本文假定读者了解React Native开发，并且想了解Native和JavaScript通信的内部机制。</p>]]>
    
    </summary>
    
      <category term="React Native" scheme="http://5minuteswalk.com/tags/React-Native/"/>
    
      <category term="iOS" scheme="http://5minuteswalk.com/tags/iOS/"/>
    
      <category term="React Native" scheme="http://5minuteswalk.com/categories/React-Native/"/>
    
  </entry>
  
</feed>
